{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["Section","title","children","Button","styled","button","FeedbackOptions","options","onLeaveFeedback","map","item","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","incrementStats","e","statName","target","dataset","name","setState","prevState","countTotalFeedback","Object","values","reduce","acc","elem","countPositiveFeedbackPercentage","Math","round","this","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAYeA,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,M,OCLDC,E,KAASC,EAAOC,OAAV,8dCUGC,EARS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAI,OACrB,eAACP,EAAD,CAAmBQ,KAAK,SAAS,YAAWD,EAAME,QAASJ,EAA3D,UACGE,EAAM,MADIA,OCwBFG,EA3BI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,+BACE,+BACE,yCACA,+BAAOJ,OAET,+BACE,4CACA,+BAAOC,OAET,+BACE,wCACA,+BAAOC,OAET,+BACE,0CACA,+BAAOC,OAET,+BACE,sDACA,iCAAOC,EAAP,cCjBOC,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KC6DEC,E,4MA1DbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,eAAiB,SAAAC,GACf,IAAMC,EAAWD,EAAEE,OAAOC,QAAQC,KAClC,EAAKC,UAAS,SAAAC,GAAS,sBAAQL,EAAWK,EAAUL,GAAY,O,EAGlEM,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKX,OAAOY,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,I,EAGrEC,gCAAkC,WAChC,OAAK,EAAKf,MAAMR,KAITwB,KAAKC,MAAO,EAAKjB,MAAMR,KAAO,EAAKiB,qBAAwB,KAHzD,G,4CAMX,WACE,IACET,EAKEkB,KALFlB,MADF,EAMIkB,KAJFlB,MAASR,EAFX,EAEWA,KAAMC,EAFjB,EAEiBA,QAASC,EAF1B,EAE0BA,IACxBO,EAGEiB,KAHFjB,eACAQ,EAEES,KAFFT,mBACAM,EACEG,KADFH,gCAGF,OACE,qCACE,cAAC,EAAD,CAASpC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEM,QAASyB,OAAOS,KAAKnB,GACrBd,gBAAiBe,MAGpBQ,IACC,cAAC,EAAD,CAAS9B,MAAM,aAAf,SACE,cAAC,EAAD,CACEa,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,IACPb,mBAAoBmB,QAIxB,cAAC,EAAD,CAAcjB,QAAQ,6B,GApDdsB,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.272d922b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nconst Button = styled.button`\n  margin-left: 10px;\n  padding: 2px 6px;\n  border: none;\n  border-radius: 5px;\n  border: 0.2px solid #dedddd;\n  cursor: pointer;\n  transition: box-shadow 250ms linear;\n\n  &:hover {\n    -webkit-box-shadow: 0px 1px 5px 1px rgba(34, 60, 80, 0.92);\n    -moz-box-shadow: 0px 1px 5px 1px rgba(34, 60, 80, 0.92);\n    box-shadow: 0px 1px 5px 1px rgba(34, 60, 80, 0.92);\n  }\n\n  &:active {\n    color: #fff;\n    background-color: #3a6edd;\n  }\n`;\n\nexport { Button };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './FeedbackOptions.styled';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(item => (\n    <Button key={item} type=\"button\" data-name={item} onClick={onLeaveFeedback}>\n      {item}{' '}\n    </Button>\n  ));\n};\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <ul>\n      <li>\n        <span>Good:</span>\n        <span>{good}</span>\n      </li>\n      <li>\n        <span>Neutral:</span>\n        <span>{neutral}</span>\n      </li>\n      <li>\n        <span>Bad:</span>\n        <span>{bad}</span>\n      </li>\n      <li>\n        <span>Total:</span>\n        <span>{total}</span>\n      </li>\n      <li>\n        <span>Positive feedback:</span>\n        <span>{positivePercentage}%</span>\n      </li>\n    </ul>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  incrementStats = e => {\n    const statName = e.target.dataset.name;\n    this.setState(prevState => ({ [statName]: prevState[statName] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, elem) => acc + elem, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    if (!this.state.good) {\n      return 0;\n    }\n\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const {\n      state,\n      state: { good, neutral, bad },\n      incrementStats,\n      countTotalFeedback,\n      countPositiveFeedbackPercentage,\n    } = this;\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(state)}\n            onLeaveFeedback={incrementStats}\n          />\n        </Section>\n        {countTotalFeedback() ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}